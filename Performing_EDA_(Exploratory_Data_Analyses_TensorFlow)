(base) C:\Users\deebratforlife>python
Python 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.

>>> import pandas as pd
>>> import numpy as np
>>> import seaborn as sns
>>> import matplotlib
>>> import matplotlib.pyplot as plt
>>> import warnings
>>> from scipy.stats import skew
>>> from scipy import stats
>>> from scipy.stats.stats import pearsonr
>>> from scipy.stats import norm
>>> from collections import Counter
>>> train = pd.read_csv("train2.csv")

>>> print("The train data size before dropping Id feature is : {} ".format(train.shape))
The train data size before dropping Id feature is : (6026, 42)

>>> close()

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'close' is not defined

>>> flush()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'flush' is not defined

>>> flush("train2.csv")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'flush' is not defined

>>> testing = pd.read_csv("train2.csv")
>>> testing
               Gene                 ...                  Number of binding sites in Cluster
0             Pdap1                 ...                                                   3
1            Gapdhs                 ...                                                   2
2            Gapdhs                 ...                                                   2
3             Efhd1                 ...                                                   3
4             Efhd1                 ...                                                   3
5             Efhd1                 ...                                                   3
6           C1qtnf3                 ...                                                   1
7            Ccdc62                 ...                                                   1
8            Trim66                 ...                                                   2
9            Trim66                 ...                                                   2
10          Prkar1b                 ...                                                   1
11           Parp14                 ...                                                   1
12           Trim17                 ...                                                  10
13           Trim17                 ...                                                  10
14           Trim17                 ...                                                  10
15           Trim17                 ...                                                  10
16           Trim17                 ...                                                  10
17           Trim17                 ...                                                  10
18           Trim17                 ...                                                  10
19           Trim17                 ...                                                  10
20           Trim17                 ...                                                  10
21           Trim17                 ...                                                  10
22            Lars2                 ...                                                   4
23            Lars2                 ...                                                   4
24            Lars2                 ...                                                   4
25            Lars2                 ...                                                   4
26            Zmat1                 ...                                                   1
27            Rell2                 ...                                                   3
28            Rell2                 ...                                                   3
29            Rell2                 ...                                                   3
...             ...                 ...                                                 ...
5996           Mcam                 ...                                                   4
5997  D030056L22Rik                 ...                                                  15
5998  D030056L22Rik                 ...                                                  15
5999  D030056L22Rik                 ...                                                  15
6000  D030056L22Rik                 ...                                                  15
6001  D030056L22Rik                 ...                                                  15
6002  D030056L22Rik                 ...                                                  15
6003  D030056L22Rik                 ...                                                  15
6004  D030056L22Rik                 ...                                                  15
6005  D030056L22Rik                 ...                                                  15
6006  D030056L22Rik                 ...                                                  15
6007  D030056L22Rik                 ...                                                  15
6008  D030056L22Rik                 ...                                                  15
6009  D030056L22Rik                 ...                                                  15
6010  D030056L22Rik                 ...                                                  15
6011  D030056L22Rik                 ...                                                  15
6012  D030056L22Rik                 ...                                                   1
6013           Syt7                 ...                                                   2
6014           Syt7                 ...                                                   2
6015         Atp10a                 ...                                                   5
6016         Atp10a                 ...                                                   5
6017         Atp10a                 ...                                                   5
6018         Atp10a                 ...                                                   5
6019         Atp10a                 ...                                                   5
6020          Runx3                 ...                                                   1
6021         Cldn22                 ...                                                   1
6022        Fam169b                 ...                                                   1
6023         Kcnk12                 ...                                                   1
6024           Oaz3                 ...                                                   1
6025           Iqub                 ...                                                   2

[6026 rows x 42 columns]

>>> testing = pd.read_csv("data.csv")

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\io\parsers.py", line 678, in parser_f
    return _read(filepath_or_buffer, kwds)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\io\parsers.py", line 440, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\io\parsers.py", line 787, in __init__
    self._make_engine(self.engine)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\io\parsers.py", line 1014, in _make_engine
    self._engine = CParserWrapper(self.f, **self.options)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\io\parsers.py", line 1708, in __init__
    self._reader = parsers.TextReader(src, **kwds)
  File "pandas\_libs\parsers.pyx", line 384, in pandas._libs.parsers.TextReader.__cinit__
  File "pandas\_libs\parsers.pyx", line 695, in pandas._libs.parsers.TextReader._setup_parser_source
FileNotFoundError: File b'data.csv' does not exist

>>> testing = pd.read_csv("train2.csv")

>>> print("The train data size before dropping Id feature is : {} ".format(testing.shape))

The train data size before dropping Id feature is : (1032, 16)

>>> train = testing

>>> print("The train data size before dropping Id feature is : {} ".format(train.shape))

The train data size before dropping Id feature is : (1032, 16)

>>> train.select_dtypes(include=['int64','float64']).columns

Index(['Number of binding sites in Cluster', 'Distance from 3'UTR end',
       'Nearby GTTs (+/- 400 nt)', 'UTR length', 'Log CPM-RPF', 'NO DOX-RPF',
       'DOX-RPF', 'P VALUE-RPF', '?RPF', 'LogFC-RNA', 'Log CPM-RNA',
       'NO DOX-RNA', 'DOX-RNA', 'P VALUE-RNA', '?RNA', '?TE'],
      dtype='object')
	  
>>> corrmat = train.corr()

>>> f, ax = plt.subplots(figsize=(12, 9))

>>> sns.heatmap(corrmat, vmax=.8, square=True);

<matplotlib.axes._subplots.AxesSubplot object at 0x000001FC45F60438>

>>> plt.show()

>>> k = 20

>>> cols = corrmat.nlargest(k, 'SalePrice')['Number of binding sites in Cluster'].index

Traceback (most recent call last):
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\indexes\base.py", line 3063, in get_loc
    return self._engine.get_loc(key)
  File "pandas\_libs\index.pyx", line 140, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 162, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'SalePrice'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 4625, in nlargest
    columns=columns).nlargest()
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\algorithms.py", line 1081, in nlargest
    return self.compute('nlargest')
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\algorithms.py", line 1185, in compute
    dtype = frame[column].dtype
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2685, in __getitem__
    return self._getitem_column(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2692, in _getitem_column
    return self._get_item_cache(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\generic.py", line 2486, in _get_item_cache
    values = self._data.get(item)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\internals.py", line 4115, in get
    loc = self.items.get_loc(item)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\indexes\base.py", line 3065, in get_loc
    return self._engine.get_loc(self._maybe_cast_indexer(key))
  File "pandas\_libs\index.pyx", line 140, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 162, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'SalePrice'

>>> cols = corrmat.nlargest(k, 'Number of binding sites in Cluster')['Number of binding sites in Cluster'].index

>>> cm = np.corrcoef(train[cols].values.T)

>>> sns.set(font_scale=1.25)

>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)

>>> plt.show()

>>> train = pd.read_csv("train2.csv")

>>> print("The train data size before dropping Id feature is : {} ".format(train.shape))

The train data size before dropping Id feature is : (6026, 19)

>>> corrmat = train.corr()

>>> f, ax = plt.subplots(figsize=(12, 9))

>>> sns.heatmap(corrmat, vmax=.8, square=True);

<matplotlib.axes._subplots.AxesSubplot object at 0x000001FC482CEF28>

>>> plt.show()

>>> k = 20

>>> cols = corrmat.nlargest(k, '?RPF')['?RPF'].index

>>> cm = np.corrcoef(train[cols].values.T)

>>> sns.set(font_scale=1.25)

>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)

>>> plt.show()

>>> train = pd.read_csv("train2.csv")

>>> train.select_dtypes(include=['int64','float64']).columns

Index(['Number of binding sites in Cluster', 'Average(P)', 'Average Frac occ',
       'Average Omega', 'Distance from 3'UTR end', 'Nearby GTTs (+/- 400 nt)',
       'UTR length', 'Log CPM-RPF', 'NO DOX-RPF', 'DOX-RPF', 'P VALUE-RPF',
       '?RPF', 'LogFC-RNA', 'Log CPM-RNA', 'NO DOX-RNA', 'DOX-RNA',
       'P VALUE-RNA', '?RNA', '?TE'],
      dtype='object')
	  
>>> corrmat = train.corr()

>>> f, ax = plt.subplots(figsize=(12, 9))

>>> sns.heatmap(corrmat, vmax=.8, square=True);

<matplotlib.axes._subplots.AxesSubplot object at 0x000001FC4C6195F8>
>>> plt.show()

>>> train = pd.read_csv("train2.csv")

>>> train.head()
   Number of binding sites in Cluster  Average(P)    ...         ?RNA       ?TE
0                                   1   -0.034007    ...     0.510436  2.326444
1                                   1    0.211143    ...     0.624386  1.645066
2                                   1    0.153543    ...     0.649353  0.047371
3                                   1   -0.037431    ...     0.691135  1.186656
4                                   1    0.080757    ...     0.814908  0.982742

[5 rows x 22 columns]

>>> train.select_dtypes(include=['int64','float64']).columns
Index(['Number of binding sites in Cluster', 'Average(P)', 'Average Frac occ',
       'Average Omega', 'Cum.(P)', 'Cum. Frac occ', 'Cum. Omega',
       'Distance from 3'UTR end', 'Nearby GTTs (+/- 400 nt)', 'UTR length',
       'Log CPM-RPF', 'NO DOX-RPF', 'DOX-RPF', 'P VALUE-RPF', '?RPF',
       'LogFC-RNA', 'Log CPM-RNA', 'NO DOX-RNA', 'DOX-RNA', 'P VALUE-RNA',
       '?RNA', '?TE'],
      dtype='object')
	  
>>> k = 10
>>> cols = corrmat.nlargest(k, 'Number of binding sites in Cluster')['Number of binding sites in Cluster'].index

>>> cm = np.corrcoef(train[cols].values.T)

>>> sns.set(font_scale=0.75)

>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)

>>> plt.show()

>>> cols = corrmat.nlargest(k, '?RPF')['?RPF'].index

>>> cm = np.corrcoef(train[cols].values.T)

>>> sns.set(font_scale=0.75)

>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)

>>> plt.show()

>>> k = 10

>>> cols = corrmat.nlargest(k, '?RNA')['?RNA'].index

>>> cm = np.corrcoef(train[cols].values.T)

>>> sns.set(font_scale=0.75)

>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)

>>> plt.show()

>>> cols = corrmat.nlargest(k, 'Cum. Omega')['Cum. Omega'].index

Traceback (most recent call last):
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\indexes\base.py", line 3063, in get_loc
    return self._engine.get_loc(key)
  File "pandas\_libs\index.pyx", line 140, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 162, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'Cum. Omega'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 4625, in nlargest
    columns=columns).nlargest()
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\algorithms.py", line 1081, in nlargest
    return self.compute('nlargest')
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\algorithms.py", line 1185, in compute
    dtype = frame[column].dtype
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2685, in __getitem__
    return self._getitem_column(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2692, in _getitem_column
    return self._get_item_cache(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\generic.py", line 2486, in _get_item_cache
    values = self._data.get(item)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\internals.py", line 4115, in get
    loc = self.items.get_loc(item)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\indexes\base.py", line 3065, in get_loc
    return self._engine.get_loc(self._maybe_cast_indexer(key))
  File "pandas\_libs\index.pyx", line 140, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 162, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'Cum. Omega'

>>> train.head()
   Number of binding sites in Cluster  Average(P)    ...         ?RNA       ?TE
0                                   1   -0.034007    ...     0.510436  2.326444
1                                   1    0.211143    ...     0.624386  1.645066
2                                   1    0.153543    ...     0.649353  0.047371
3                                   1   -0.037431    ...     0.691135  1.186656
4                                   1    0.080757    ...     0.814908  0.982742

[5 rows x 22 columns]
>>> corrmat = train.corr()

>>> f, ax = plt.subplots(figsize=(12, 9))

>>> sns.heatmap(corrmat, vmax=.8, square=True);

<matplotlib.axes._subplots.AxesSubplot object at 0x000001FC498633C8>
>>> plt.show()

>>> var = 'Number of binding sites in Cluster'

>>> data = pd.concat([train['Average Omega'], train[var]], axis=1)

>>> f, ax = plt.subplots(figsize=(8, 6))

>>> fig = sns.boxplot(x=var, y="SalePrice", data=data)

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 2211, in boxplot
    width, dodge, fliersize, linewidth)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 441, in __init__
    self.establish_variables(x, y, hue, data, orient, order, hue_order)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 151, in establish_variables
    raise ValueError(err)
ValueError: Could not interpret input 'SalePrice'

>>> fig = sns.boxplot(x=var, y="Average Omega", data=data)

>>> fig.axis(ymin=0, ymax=5);

(-0.5, 26.5, 0, 5)
>>> plt.show()

>>> f, ax = plt.subplots(figsize=(12, 9))

>>> fig = sns.boxplot(x=var, y="Average Omega", data=data)

>>> fig.axis(ymin=0, ymax=1);
(-0.5, 26.5, 0, 1)

>>> plt.show()
>>> f, ax = plt.subplots(figsize=(8, 6))

>>> fig = sns.boxplot(x=var, y="SalePrice", data=data)

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 2211, in boxplot
    width, dodge, fliersize, linewidth)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 441, in __init__
    self.establish_variables(x, y, hue, data, orient, order, hue_order)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 151, in establish_variables
    raise ValueError(err)
ValueError: Could not interpret input 'SalePrice'

>>> fig = sns.boxplot(x=var, y="Average Omega", data=data)

>>> fig.axis(ymin=0, ymax=0.2);

(-0.5, 26.5, 0, 0.2)
>>> plt.show()

>>> train = pd.read_csv("train2.csv")

>>> print("The train data size before dropping Id feature is : {} ".format(train.shape))
The train data size before dropping Id feature is : (6026, 20)
>>> train.head()
   Number of binding sites in Cluster  Cumulative Frac Occ     ...            ?TE  Unnamed: 19
0                                 1.0           192.116843     ...       2.326444          NaN
1                                 1.0            15.821983     ...       1.645066          NaN
2                                 1.0            54.536121     ...       0.047371          NaN
3                                 1.0           103.489032     ...       1.186656          NaN
4                                 1.0           131.900383     ...       0.982742          NaN

[5 rows x 20 columns]
>>> train = pd.read_csv("train2.csv")

>>> print("The train data size before dropping Id feature is : {} ".format(train.shape))
The train data size before dropping Id feature is : (1032, 22)

>>> train.head()
   Number of binding sites in Cluster  Cumulative Frac Occ    ...         ?RNA       ?TE
0                                   1           192.116843    ...     0.510436  2.326444
1                                   1            15.821983    ...     0.624386  1.645066
2                                   1            54.536121    ...     0.649353  0.047371
3                                   1           103.489032    ...     0.691135  1.186656
4                                   1           131.900383    ...     0.814908  0.982742

[5 rows x 22 columns]

>>> train.select_dtypes(include=['int64','float64']).columns

Index(['Number of binding sites in Cluster', 'Cumulative Frac Occ',
       'Cumulative Omega', 'Cumplative P', 'Av Frac Occ', 'Av Omega', 'Av P',
       'Distance from 3'UTR end', 'Nearby GTTs (+/- 400 nt)', 'UTR length',
       'Log CPM-RPF', 'NO DOX-RPF', 'DOX-RPF', 'P VALUE-RPF', '?RPF',
       'LogFC-RNA', 'Log CPM-RNA', 'NO DOX-RNA', 'DOX-RNA', 'P VALUE-RNA',
       '?RNA', '?TE'],
      dtype='object')
	  
>>> corrmat = train.corr()

>>> f, ax = plt.subplots(figsize=(12, 9))

>>> sns.heatmap(corrmat, vmax=.8, square=True);

<matplotlib.axes._subplots.AxesSubplot object at 0x000001FC4AD159B0>

>>> plt.show()

>>> k = 10

>>> cols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index

Traceback (most recent call last):
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\indexes\base.py", line 3063, in get_loc
    return self._engine.get_loc(key)
  File "pandas\_libs\index.pyx", line 140, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 162, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'SalePrice'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 4625, in nlargest
    columns=columns).nlargest()
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\algorithms.py", line 1081, in nlargest
    return self.compute('nlargest')
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\algorithms.py", line 1185, in compute
    dtype = frame[column].dtype
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2685, in __getitem__
    return self._getitem_column(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2692, in _getitem_column
    return self._get_item_cache(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\generic.py", line 2486, in _get_item_cache
    values = self._data.get(item)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\internals.py", line 4115, in get
    loc = self.items.get_loc(item)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\indexes\base.py", line 3065, in get_loc
    return self._engine.get_loc(self._maybe_cast_indexer(key))
  File "pandas\_libs\index.pyx", line 140, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 162, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'SalePrice'

>>> cols = corrmat.nlargest(k, 'Number of binding sites in Cluster')['Number of binding sites in Cluster'].index

>>> cm = np.corrcoef(train[cols].values.T)

>>> sns.set(font_scale=0.75)

>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)

>>> plt.show()

>>> k = 10

>>> cols = corrmat.nsmallest(k, 'Number of binding sites in Cluster')['Number of binding sites in Cluster'].index

>>> cm = np.corrcoef(train[cols].values.T)

>>> sns.set(font_scale=0.75)

>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)

>>> plt.show()

>>> var = 'Number of binding sites in Cluster'

>>> data = pd.concat([train['Number of binding sites in Cluster'], train[var]], axis=1)

>>> f, ax = plt.subplots(figsize=(8, 6))

>>> fig = sns.boxplot(x=var, y="Number of binding sites in CLuster", data=data)

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 2211, in boxplot
    width, dodge, fliersize, linewidth)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 441, in __init__
    self.establish_variables(x, y, hue, data, orient, order, hue_order)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 144, in establish_variables
    hue = data.get(hue, hue)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\generic.py", line 2474, in get
    return self[key]
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2685, in __getitem__
    return self._getitem_column(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2695, in _getitem_column
    result = self._constructor(self._data.get(key))
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\internals.py", line 4130, in get
    raise TypeError("cannot label index with a null key")
TypeError: cannot label index with a null key

>>> fig = sns.boxplot(x=var, y="Number of binding sites in Cluster", data=data)
Traceback (most recent call last):

  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 2211, in boxplot
    width, dodge, fliersize, linewidth)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 441, in __init__
    self.establish_variables(x, y, hue, data, orient, order, hue_order)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 144, in establish_variables
    hue = data.get(hue, hue)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\generic.py", line 2474, in get
    return self[key]
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2685, in __getitem__
    return self._getitem_column(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2695, in _getitem_column
    result = self._constructor(self._data.get(key))
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\internals.py", line 4130, in get
    raise TypeError("cannot label index with a null key")
TypeError: cannot label index with a null key

>>> var = 'Number of binding sites in Cluster'
>>> data = pd.concat([train['Cumulative Omega'], train[var]], axis=1)
>>> f, ax = plt.subplots(figsize=(8, 6))
>>> fig = sns.boxplot(x=var, y="Cumulative Omega", data=data)
>>> fig.axis(ymin=0, ymax=0.3);
(-0.5, 24.5, 0, 0.3)
>>> plt.show()
>>> var = 'Number of binding sites in Cluster'
>>> data = pd.concat([train['Nearby GTTs (+/- 400 nt)'], train[var]], axis=1)
>>> f, ax = plt.subplots(figsize=(8, 6))
>>> fig = sns.boxplot(x=var, y="Nearby GTTs (+/- 400 nt)", data=data)
>>> fig.axis(ymin=0, ymax=30);
(-0.5, 24.5, 0, 30)
>>> plt.show()
>>> fig = sns.boxplot(x=var, y="Cumulative Omega", data=data)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 2211, in boxplot
    width, dodge, fliersize, linewidth)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 441, in __init__
    self.establish_variables(x, y, hue, data, orient, order, hue_order)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\seaborn\categorical.py", line 151, in establish_variables
    raise ValueError(err)
ValueError: Could not interpret input 'Cumulative Omega'
>>> fig = sns.boxplot(x=var, y="Nearby GTTs (+/- 400 nt)", data=data)
>>> fig.axis(ymin=0, ymax=20);
(-0.5, 24.5, 0, 20)
>>> plt.show()
>>> var = 'Number of binding sites in Cluster'
>>> data = pd.concat([train['Log CPM-PRF'], train[var]], axis=1)
Traceback (most recent call last):
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\indexes\base.py", line 3063, in get_loc
    return self._engine.get_loc(key)
  File "pandas\_libs\index.pyx", line 140, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 162, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'Log CPM-PRF'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2685, in __getitem__
    return self._getitem_column(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\frame.py", line 2692, in _getitem_column
    return self._get_item_cache(key)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\generic.py", line 2486, in _get_item_cache
    values = self._data.get(item)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\internals.py", line 4115, in get
    loc = self.items.get_loc(item)
  File "C:\Users\deebratforlife\Anaconda3\lib\site-packages\pandas\core\indexes\base.py", line 3065, in get_loc
    return self._engine.get_loc(self._maybe_cast_indexer(key))
  File "pandas\_libs\index.pyx", line 140, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 162, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'Log CPM-PRF'
>>> data = pd.concat([train['Log CPM-RPF'], train[var]], axis=1)
>>> f, ax = plt.subplots(figsize=(8, 6))
>>> fig = sns.boxplot(x=var, y="Log CPM-RPF", data=data)
>>> fig.axis(ymin=0, ymax=60);
(-0.5, 24.5, 0, 60)
>>> plt.show()
>>> fig = sns.boxplot(x=var, y="Log CPM-RPF", data=data)
>>> fig.axis(ymin=0, ymax=10);
(-0.5, 24.5, 0, 10)
>>> plt.show()
>>> fig = sns.boxplot(x=var, y="Log CPM-RPF", data=data)
>>> fig.axis(ymin=0, ymax=20);
(-0.5, 24.5, 0, 20)
>>> plt.show()
>>> fig = sns.boxplot(x=var, y="Log CPM-RPF", data=data)
>>> fig.axis(ymin=0, ymax=15);
(-0.5, 24.5, 0, 15)
>>> plt.show()
>>> var = 'Number of binding sites in Cluster'
>>> data = pd.concat([train['Log CPM-RNA'], train[var]], axis=1)
>>> f, ax = plt.subplots(figsize=(8, 6))
>>> fig = sns.boxplot(x=var, y="Log CPM-RNA", data=data)
>>> fig.axis(ymin=0, ymax=15);
(-0.5, 24.5, 0, 15)
>>> plt.show()
>>> k = 10
>>> cols = corrmat.nlargest(k, 'Cumulative Omega')['Cumulative Omega'].index
>>> cm = np.corrcoef(train[cols].values.T)
>>> sns.set(font_scale=0.75)
>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)
>>> plt.show()
>>> cols = corrmat.nlargest(k, 'Cumulative Frac Occ')['Cumulative Frac Occ'].index
>>> cm = np.corrcoef(train[cols].values.T)
>>> sns.set(font_scale=0.75)
>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)
>>> plt.show()
>>> cols = corrmat.nlargest(k, 'Cumplative P')['Cumplative P'].index
>>> cm = np.corrcoef(train[cols].values.T)
>>> sns.set(font_scale=0.75)
>>> hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)
>>> plt.show()
>>> var = 'Number of binding sites in Cluster'
>>> data = pd.concat([train['Distance from 3'UTR end'], train[var]], axis=1)
  File "<stdin>", line 1
    data = pd.concat([train['Distance from 3'UTR end'], train[var]], axis=1)
                                               ^
SyntaxError: invalid syntax
>>> data = pd.concat([train['Distance from 3'UTR end'], train[var]], axis=1)
  File "<stdin>", line 1
    data = pd.concat([train['Distance from 3'UTR end'], train[var]], axis=1)
                                               ^
SyntaxError: invalid syntax
>>> train = pd.read_csv("train2.csv")
>>> var = 'Number of binding sites in Cluster'
>>> data = pd.concat([train['UTR end'], train[var]], axis=1)
>>> f, ax = plt.subplots(figsize=(8, 6))
>>> fig = sns.boxplot(x=var, y="UTR end", data=data)
>>> fig.axis(ymin=0, ymax=8000);
(-0.5, 24.5, 0, 8000)
>>> plt.show()
>>> fig = sns.boxplot(x=var, y="UTR end", data=data)
>>> fig.axis(ymin=0, ymax=1000);
(-0.5, 24.5, 0, 1000)
>>> plt.show()
