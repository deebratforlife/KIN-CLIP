# Here, we used the 2D kernel density estimation function from the MASS R package to 
# color points by density in a plot created with ggplot2. This helps us to see where 
# most of the data points lie in a busy plot with many overplotted points.

#loading required libraries

library(MASS)
library(ggplot2)
library(viridis)
#> Loading required package: viridisLite

theme_set(theme_bw(base_size = 16))

# We performed a test run first to see what parameters yield optimal density data points. It varies with data, so test run proves helpful for future iterations.

# Get density of points in 2 dimensions.

# @param x A numeric vector.
# @param y A numeric vector.
# @param n Create a square n by n grid to compute density.
# @return The density within each square. The size of the grid and square can be adjusted using the parameters described below.

# function to convert data into grid for density plotting. We call this function - Density Function

# Density Function
get_density <- function(x, y, ...) {
  dens <- MASS::kde2d(x, y, ...)
  ix <- findInterval(x, dens$x)
  iy <- findInterval(y, dens$y)
  ii <- cbind(ix, iy)
  return(dens$z[ii])
}

# set a seed if you want to ensure same output for multiple instances of running this code.
# seed can be any number. Here we use 1.

set.seed(1)

# Obtain statistics for data and create sample data set

dat <- data.frame(
  x = c(
    rnorm(1e4, mean = 0, sd = 0.1),
    rnorm(1e3, mean = 0, sd = 0.1)
  ),
  y = c(
    rnorm(1e4, mean = 0, sd = 0.1),
    rnorm(1e3, mean = 0.1, sd = 0.2)
  )
)

#This creates a basic scatterplot. Notice how the points are overplotted, so peak density can't be seen easily:

ggplot(dat) + geom_point(aes(x, y))

#splitting the same plot from above into a 100 by 100 grid of squares and then coloring the points by the estimated density in each square gives us:

dat$density <- get_density(dat$x, dat$y, n = 100)
ggplot(dat) + geom_point(aes(x, y, color = density)) + scale_color_viridis()

#setting n = 15 (the squares in the grid are too big, but might work if the number of data points are less than ~3000):

dat$density <- get_density(dat$x, dat$y, n = 15)
ggplot(dat) + geom_point(aes(x, y, color = density)) + scale_color_viridis()
plot of chunk plot-with-density-rough

#modifying the bandwidth of the normal kernel with h = c(1, 1)

dat$density <- get_density(dat$x, dat$y, h = c(1, 1), n = 100)
ggplot(dat) + geom_point(aes(x, y, color = density)) + scale_color_viridis()

#Now obtaining actual data matrix;

# Once again, the Density Function
get_density <- function(x, y, ...) {
  dens <- MASS::kde2d(x, y, ...)
  ix <- findInterval(x, dens$x)
  iy <- findInterval(y, dens$y)
  ii <- cbind(ix, iy)
  return(dens$z[ii])
}

#Obtain the data matrix

testing <- read.delim("C:/Users/deebratforlife/Desktop/KIN-CLIP_density.txt", header=FALSE, na.strings="")
View(KIN-CLIP_density)
data <- KIN-CLIP_density or testing  # depending on data assignment in line 85-87.
data$density <- get_density(data$V1, data$V2, n = 50) # Here, V1 and V2 are column headings. In case cloumns have some other name, use that.

#setting parameters for plotting:

ggplot(data) + geom_point(aes(V1, V2, color = density)) + scale_color_viridis() + ylim(0.75,1.5) + xlim(0.75,1.5) + theme_classic()

# Pertains to following KIN-CLIP figures: Main Figure 2d 2f 4b 4i 4j | Extended Data Figure 3 10 
